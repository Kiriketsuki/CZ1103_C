1.
    The program initializes an array containing 3 arrays, each containing an array with 4 elements. 
    [[1,2,3,4]
     [5,6,7,8]
     [9,10,11,12]]
    It creates 2 empty integer variables h and k
    It for loops and asks the user to fill in each element of each array
    At line a, it for loops, going through each row, and using the add1 function to add 1 to the content of each element of each row

    If line a is changed to add1(array[0], 3*4), it still works as the function add1 adds 1 by using pointers. the pointer is incremented by 1 12 times in both variants

2.
    
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int get_number_of_stars () {
   int stars_no;
   printf("Please enter the amount of numbers you want generated: \n");
   scanf("%d", &stars_no);
   return stars_no;
}

void print_stars(int arr[]) {
   int *pt = arr;
   for (pt; pt != &arr[100]; pt++) {
      if (*pt == 42) {
         printf("*");
      }
   }

   printf("\n");
}

void add_stars(int arr[]) {
   for (int i = 0; i < 100; i ++) {
      if (arr[i] != 42) {
         arr[i] = 42;
         break;
      }
   }
}

int main () {
   int zero[100], ten[100], twenty[100], thirty[100], fourty[100], fifty[100], sixty[100], seventy[100], eighty[100], ninety[100];
   int generated_no, stars_no;  
   srand(time(NULL));

   stars_no = get_number_of_stars();

   for (int i = 0; i < stars_no; i++) {
      generated_no = rand()%100;
      switch (generated_no / 10) {
         case 0:
            add_stars(zero);
            break;
         case 1:
            add_stars(ten);
            break;
         case 2:
            add_stars(twenty);
            break;
         case 3:
            add_stars(thirty);
            break;
         case 4:
            add_stars(fourty);
            break;
         case 5:
            add_stars(fifty);
            break;
         case 6:
            add_stars(sixty);
            break;
         case 7:
            add_stars(seventy);
            break;
         case 8:
            add_stars(eighty);
            break;
         case 9:
            add_stars(ninety);
            break;
         default:
            break;
      }
   }

   printf("00 - 09 | ");
   print_stars(zero);
   printf("10 - 19 | ");
   print_stars(ten);
   printf("20 - 29 | ");
   print_stars(twenty);
   printf("30 - 39 | ");
   print_stars(thirty);
   printf("40 - 49 | ");
   print_stars(fourty);
   printf("50 - 59 | ");
   print_stars(fifty);
   printf("60 - 69 | ");
   print_stars(sixty);
   printf("70 - 79 | ");
   print_stars(seventy);
   printf("80 - 89 | ");
   print_stars(eighty);
   printf("90 - 99 | ");
   print_stars(ninety);
}
3.
    #include <stdio.h>
    #include <stdlib.h>
    
    
    void transpose2D( int row_size, int col_size,int ar[][col_size]) {
        int ar_2[row_size][col_size];
    
        for(int i = 0; i < row_size; i++) {
            for(int j = 0; j < col_size; j++) {
                ar_2[i][j] = ar[i][j];
            }
        }
        
        for(int i = 0; i < row_size; i++) {
            for(int j = 0; j < col_size; j++) {
                ar[j][i] = ar_2[i][j];
            }
        }
    }
    
    int main () {
        int test[4][4] = {{1,2,3,4},{1,1,2,2},{3,3,4,4},{4,5,6,7}};
        
        transpose2D(4,4,test);
        
        for (int i = 0; i<4;i++){
            for (int j = 0; j<4; j++){
                printf("%d",test[i][j]);
            }
            putchar('\n');
        }
    
    }

4. 

#include <stdio.h>
#include <stdlib.h>

void reduce_matrix_2D (int row_size, int col_size, int ar[row_size][col_size]) {
    for (int j = col_size-1; j > -1 ; j--) {
        int sum = 0;
        for (int i = row_size-1; i > -1; i--) {
            if (i > j){
                sum += ar[i][j];
                ar[i][j] = 0;
            } else { if (i == j) {
                ar[i][j] += sum;
                }        
            }
        }
    }
}

int main () {
    int arr[][4] = {{4,3,8,6},{9,0,6,5},{5,1,2,4},{9,8,3,7}};

    reduce_matrix_2D(4,4,arr);
    for (int i = 0; i < 4; i ++) {
        for (int j = 0; j < 4; j++) {
            printf("%d", arr[i][j]);
            printf(" ");
        }
        putchar('\n');
    }
}